class is SpriteSceneWithEntities imports cape imports cave imports motion:

var backButton as TextButtonEntity
var player as PlayerEntity
var controls as PlayerControls
// var enemy as EnemyEntity
// var rock as ProjectileEntity
// var paper as ProjectileEntity
// var scissors as ProjectileEntity
var score as int
var life as int
var scoreSprite as TextSprite
var lifeSprite as TextSprite
var projectile as ProjectileEntity
var height as double
var width as double
var time as int
var projectileEntities as vector<ProjectileEntity>
var enemyEntities as vector<EnemyEntity>

func initialize override
{
	base.initialize()
	height = getReferenceHeight()
	width = getReferenceWidth()
	backButton = TextButtonEntity.forText("QUIT")
	backButton.setBackgroundColor(Color.forRGB(255, 0, 0))
	addEntity(backButton)
	time = 0
	life = 5
	score = 0
	backButton.move(0, 0)
	backButton.setClickHandler(func {
		quitGame()
	})
	projectileEntities = new vector<ProjectileEntity>
	enemyEntities = new vector<EnemyEntity>
	controls = new PlayerControls()
	addEntity(controls)
	player = new PlayerEntity()
	addEntity(player)
	var textProp = TextProperties.forText("Count")
	textProp.setTextColor(Color.white())
	textProp.setFontSizeRelative(0.075 * height)
	textProp.setFontFamily("Times new roman")
	textProp.setFontIsItalic(true)
	scoreSprite = addTextSprite(textProp)
	scoreSprite.move(0.40 * width, height - scoreSprite.getHeight())
	lifeSprite = addTextSprite(textProp)
	lifeSprite.move(0.40 * width + scoreSprite.getWidth(), height - scoreSprite.getHeight())
}

func getScore as int
{
	return score
}

func getLife as int
{
	return life
}

func addScore
{
	score++
}

func minusLife(n as int)
{
	life -= n
}

func quitGame
{
	pushScene(new MainMenu())
}

func removeProjectileEntity(e as ProjectileEntity) as void
{
	removeEntity(e)
	Vector.removeValue(projectileEntities, e)
}

func removeEnemyEntity(e as EnemyEntity) as void
{
	removeEntity(e)
	Vector.removeValue(enemyEntities, e)
}

func getProjectileEntities as vector<ProjectileEntity>
{
	return projectileEntities
}

func getEnemyEntities as vector<EnemyEntity>
{
	return enemyEntities
}

func getContext as ApplicationContext
{
	return context
}

func getPlayer as PlayerEntity
{
	return player
}
func getControls as PlayerControls
{
	return controls
}

func getProjectile as ProjectileEntity
{
	return projectile
}

func cleanup override
{
	removeAllSprites()
}

func shootRock
{
	var rock = new ProjectileEntity(1)
	addEntity(rock)
	projectileEntities += rock
}

func shootPaper
{
	var paper = new ProjectileEntity(2)
	addEntity(paper)
	projectileEntities += paper
}

func shootScissors
{
	var scissors = new ProjectileEntity(3)
	addEntity(scissors)
	projectileEntities += scissors
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	time++
	lifeSprite.setText(String.append("LIFE: ", life))
	scoreSprite.setText(String.append("SCORE: ", score))
	if ((time % 250) == 0){
		var enemy = new EnemyEntity()
		addEntity(enemy)
		enemyEntities += enemy
	}
	if(getLife() == 0){
		pushScene(new GameOver())
	}
}
