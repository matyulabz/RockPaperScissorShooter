class is SpriteSceneWithEntities imports cape imports cave imports motion:

var bg as TextureSprite
var quitBtn as TextureSprite
var player as PlayerEntity
var controls as PlayerControls
var projectile as ProjectileEntity
var scoreSprite as TextSprite
var lifeSprite as TextSprite
var score as int
var life as int
var time as int
var height as double
var width as double
var projectileEntities as vector<ProjectileEntity>
var enemyEntities as vector<EnemyEntity>
var audioManager as AudioManager
var stream as AudioStream
var spawnR as AudioClip
var spawnP as AudioClip
var spawnS as AudioClip

func initialize override
{
	base.initialize()
	height = getReferenceHeight()
	width = getReferenceWidth()
	bg = addTextureSpriteForSize(createTextureForImageResource("game_bg"), width, height)
	bg.move(0, 0)
	audioManager = AudioManager.forApplication(context)
	if(audioManager != null) {
		stream = audioManager.getStreamForResource("game_bgm")
		spawnR = audioManager.getClipForResource("rock_sound")
		spawnP = audioManager.getClipForResource("paper_sound")
		spawnS = audioManager.getClipForResource("scissors_sound")
	}
	time = 0
	life = 5
	score = 0
	quitBtn = addTextureSpriteForSize(createTextureForImageResource("quit_button_1"), 0.15 * width, 0.1 * height)
	quitBtn.move(0, 0)
	projectileEntities = new vector<ProjectileEntity>
	enemyEntities = new vector<EnemyEntity>
	controls = new PlayerControls()
	addEntity(controls)
	player = new PlayerEntity()
	addEntity(player)
	var textProp = TextProperties.forText("Count")
	textProp.setTextColor(Color.white())
	textProp.setFontSizeRelative(0.075 * height)
	textProp.setFontFamily("Times new roman")
	textProp.setFontIsItalic(true)
	scoreSprite = addTextSprite(textProp)
	scoreSprite.move(0.3 * width, height - scoreSprite.getHeight())
	lifeSprite = addTextSprite(textProp)
	lifeSprite.move(0.3 * width + scoreSprite.getWidth(), height - scoreSprite.getHeight())
	onTimeToPlayStream()
}

func getContext as ApplicationContext
{
	return context
}

func onTimeToPlaySoundClip(clip as AudioClip)
{
	if(clip != null) {
		clip.play()
	}
}

func onTimeToPlayStream
{
	if(stream != null) {
		stream.play()
		stream.setLooping(true)
	}
}

func stopStream
{
	if(stream != null) {
		stream.stop()
	}
}

func getScore as int
{
	return score
}

func getLife as int
{
	return life
}

func addScore
{
	score++
}

func minusLife(n as int)
{
	life -= n
}

func onPointerEvent(event as PointerEvent) override
{
	base.onPointerEvent(event)
	if(event.isConsumed) {
		return
	}
	if(event.action == PointerEvent.DOWN) {
		if(event.isInside(quitBtn.getX(), quitBtn.getY(), quitBtn.getWidth(),quitBtn.getHeight())) {
			pushScene(new MainMenu())
		}
	}
}

func removeProjectileEntity(e as ProjectileEntity) as void
{
	removeEntity(e)
	Vector.removeValue(projectileEntities, e)
}

func removeEnemyEntity(e as EnemyEntity) as void
{
	removeEntity(e)
	Vector.removeValue(enemyEntities, e)
}

func getProjectileEntities as vector<ProjectileEntity>
{
	return projectileEntities
}

func getEnemyEntities as vector<EnemyEntity>
{
	return enemyEntities
}

func getPlayer as PlayerEntity
{
	return player
}

func getControls as PlayerControls
{
	return controls
}

func getProjectile as ProjectileEntity
{
	return projectile
}

func cleanup override
{
	removeAllSprites()
	stopStream()
}

func shootRock
{
	var rock = new ProjectileEntity(1)
	addEntity(rock)
	onTimeToPlaySoundClip(spawnR)
	projectileEntities += rock
}

func shootPaper
{
	var paper = new ProjectileEntity(2)
	addEntity(paper)
	onTimeToPlaySoundClip(spawnP)
	projectileEntities += paper
}

func shootScissors
{
	var scissors = new ProjectileEntity(3)
	addEntity(scissors)
	onTimeToPlaySoundClip(spawnS)
	projectileEntities += scissors
}

func tick(gameTime as TimeValue, delta as double) override
{
	base.tick(gameTime, delta)
	time++
	lifeSprite.setText(String.append("LIFE: ", life))
	scoreSprite.setText(String.append("SCORE: ", score))
	if ((time % 250) == 0){
		var enemy = new EnemyEntity()
		addEntity(enemy)
		enemyEntities += enemy
	}
	if(getLife() == 0){
		pushScene(new GameOver(getScore()))
	}
}
